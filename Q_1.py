from operator import index
from numpy.core.numeric import NaN
import pandas as pd
from pathlib import *
import json
import numpy as np
import matplotlib.pyplot as plt
class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname):
        
        self.data_fname = Path(data_fname)
        self.data = self.read_data()

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        
        data= pd.read_json(self.data_fname)
        return data

    def show_age_distrib(self):

        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        bins = np.arange(0,110,10)
        hist = np.histogram(self.data['age'], bins= bins)
        plt.hist(self.data['age'], bins= bins)  # arguments are passed to np.histogram
        plt.title("Histogram for paticipant age")
        plt.show()
        return bins, hist

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        p= "^\w+.+@+\w+\.+(com)" 
        #re pattern
        data_good_emails = self.data[self.data['email'].str.match(p)== True]
        #Creates a new data frame with only correct emails
        data_good_emails = data_good_emails.reset_index(drop=True)
        #resetting the indecis
        return data_good_emails


    def fill_na_with_mean(self):

        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
                Row indices of the students that their new grades were generated
            """
        
        data_questions = self.data[['q1','q2','q3','q4','q5']]
        c = data_questions[data_questions.isna().any(axis=1)].index
        Changed_indices = np.asarray(c)
        #returns all the inecies where ones can find Nan value
        self.data[['q1','q2','q3','q4','q5']]= self.data[['q1','q2','q3','q4','q5']].fillna(self.data.mean())    
        # each column specified received its respective mean. 
        
        return self.data, Changed_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1): 

        """Calculates the average score of a subject and adds a new "score" column
            with it.

            If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
            score should be NA. Otherwise, the score is simply the mean of the other grades.
            The datatype of score is UInt8, and the floating point raw numbers should be
            rounded down.

            Parameters
            ----------
            maximal_nans_per_sub : int, optional
                Number of allowed NaNs per subject before giving a NA score.

            Returns
            -------
            pd.DataFrame
                A new DF with a new column - "score".
            """

        data2 = self.data.copy()

        data_questions = self.data[['q1','q2','q3','q4','q5']]
        data2['score'] = data_questions.mean(axis=1, skipna=True)  
        
        for index, row in data_questions.iterrows():
            if (data_questions.loc[[index]].isna().sum().sum()) > 1:
                data2['score'] = data2['score'].replace([data2['score'].loc[index]], pd.NA)
            else:
                [data2['score'].loc[index]] = data_questions.loc[[index]].mean(axis=1).astype(np.int8)   
                
        return data2

a= QuestionnaireAnalysis('data.json')